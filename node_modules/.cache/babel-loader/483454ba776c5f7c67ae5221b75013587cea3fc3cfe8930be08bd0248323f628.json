{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst app = express();\napp.use(cors());\napp.use(express.json());\nconst serviceProviderSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true\n  },\n  profession: {\n    type: String,\n    required: true\n  },\n  contact: {\n    type: String,\n    required: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n});\nconst ServiceProvider = mongoose.model('ServiceProvider', serviceProviderSchema);\nmongoose.connect('mongodb://localhost:27017/your_database_name', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\napp.get('/service-providers', async (req, res) => {\n  try {\n    const serviceProviders = await ServiceProvider.find({});\n    res.json(serviceProviders);\n  } catch (error) {\n    console.error('Error fetching service providers:', error);\n    res.status(500).json({\n      error: 'Failed to fetch service providers'\n    });\n  }\n});\napp.delete('/service-providers/:email', async (req, res) => {\n  const {\n    email\n  } = req.params;\n  try {\n    await ServiceProvider.deleteOne({\n      email\n    });\n    res.json({\n      message: 'Service provider deleted successfully'\n    });\n  } catch (error) {\n    console.error('Error deleting service provider:', error);\n    res.status(500).json({\n      error: 'Failed to delete service provider'\n    });\n  }\n});\napp.listen(8000, () => {\n  console.log('Server is running on port 8000');\n});","map":{"version":3,"names":["express","require","mongoose","cors","app","use","json","serviceProviderSchema","Schema","email","type","String","required","profession","contact","password","ServiceProvider","model","connect","useNewUrlParser","useUnifiedTopology","get","req","res","serviceProviders","find","error","console","status","delete","params","deleteOne","message","listen","log"],"sources":["D:/website-master/website-master/src/components/Service.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst serviceProviderSchema = new mongoose.Schema({\r\n  email: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  profession: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  contact: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true\r\n  }\r\n});\r\n\r\nconst ServiceProvider = mongoose.model('ServiceProvider', serviceProviderSchema);\r\n\r\nmongoose.connect('mongodb://localhost:27017/your_database_name', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true\r\n});\r\n\r\napp.get('/service-providers', async (req, res) => {\r\n  try {\r\n    const serviceProviders = await ServiceProvider.find({});\r\n    res.json(serviceProviders);\r\n  } catch (error) {\r\n    console.error('Error fetching service providers:', error);\r\n    res.status(500).json({ error: 'Failed to fetch service providers' });\r\n  }\r\n});\r\n\r\napp.delete('/service-providers/:email', async (req, res) => {\r\n  const { email } = req.params;\r\n\r\n  try {\r\n    await ServiceProvider.deleteOne({ email });\r\n    res.json({ message: 'Service provider deleted successfully' });\r\n  } catch (error) {\r\n    console.error('Error deleting service provider:', error);\r\n    res.status(500).json({ error: 'Failed to delete service provider' });\r\n  }\r\n});\r\n\r\napp.listen(8000, () => {\r\n  console.log('Server is running on port 8000');\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrBI,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACC,GAAG,CAACL,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC;AAEvB,MAAMC,qBAAqB,GAAG,IAAIL,QAAQ,CAACM,MAAM,CAAC;EAChDC,KAAK,EAAE;IACLC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDC,UAAU,EAAE;IACVH,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDE,OAAO,EAAE;IACPJ,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDG,QAAQ,EAAE;IACRL,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,MAAMI,eAAe,GAAGd,QAAQ,CAACe,KAAK,CAAC,iBAAiB,EAAEV,qBAAqB,CAAC;AAEhFL,QAAQ,CAACgB,OAAO,CAAC,8CAA8C,EAAE;EAC/DC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC;AAEFhB,GAAG,CAACiB,GAAG,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,IAAI;IACF,MAAMC,gBAAgB,GAAG,MAAMR,eAAe,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;IACvDF,GAAG,CAACjB,IAAI,CAACkB,gBAAgB,CAAC;EAC5B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzDH,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACtB,IAAI,CAAC;MAAEoB,KAAK,EAAE;IAAoC,CAAC,CAAC;EACtE;AACF,CAAC,CAAC;AAEFtB,GAAG,CAACyB,MAAM,CAAC,2BAA2B,EAAE,OAAOP,GAAG,EAAEC,GAAG,KAAK;EAC1D,MAAM;IAAEd;EAAM,CAAC,GAAGa,GAAG,CAACQ,MAAM;EAE5B,IAAI;IACF,MAAMd,eAAe,CAACe,SAAS,CAAC;MAAEtB;IAAM,CAAC,CAAC;IAC1Cc,GAAG,CAACjB,IAAI,CAAC;MAAE0B,OAAO,EAAE;IAAwC,CAAC,CAAC;EAChE,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxDH,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACtB,IAAI,CAAC;MAAEoB,KAAK,EAAE;IAAoC,CAAC,CAAC;EACtE;AACF,CAAC,CAAC;AAEFtB,GAAG,CAAC6B,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBN,OAAO,CAACO,GAAG,CAAC,gCAAgC,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}